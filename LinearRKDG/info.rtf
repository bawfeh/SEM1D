{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18320\viewh11500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Linear test; time-dependent velocity: u_t + (au)_x = 0\

\b0 a = \\sin(t)\
x \\in [0,2], 0<t<T\
bc = periodic\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Input file: 
\b LinAdv0004
\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\b LinearRKDG1pConvCr5.npy
\b0 \
Using SLDG (SLRKDG1): 
\b pConvergence.py
\b0 \
------------------------------------------------------------\
q = 1,2,\'85,6; T = 4.00\
nsteps chosen such that Cr = 5 or nsteps=1;\
L2-Errors computed for each q;\
Repeat procedure for M = Ne = 20, 40, 80\
\
Load results using the following numpy routine:\
with open(\'92LinearRKDG1pConvCr5\'92, \'91rb\'92) as f:\
	errs = np.load(f)  # (3,6) matrix of L2-errors\
	pp = np.load(f)	# vector of polynomial degrees q\
	dt = np.load(f)	# vector of time step sizes used for each q\
\
\

\b LinearRKDG1pConvCr2p5.npy
\b0 \
Using SLDG (SLRKDG1): 
\b pConvergence.py
\b0 \
------------------------------------------------------------\
q = 1,2,\'85,6; T = 4.00\
nsteps chosen such that Cr = 2.5 or nsteps=1;\
L2-Errors computed for each q;\
Repeat procedure for M = Ne = 20, 40, 80\
\
Load results using the following numpy routine:\
with open(\'92LinearRKDG1pConvCr2p5.npy\'92, \'91rb\'92) as f:\
	errs = np.load(f)  # (3,6) matrix of L2-errors\
	pp = np.load(f)	# vector of polynomial degrees q\
	dt = np.load(f)	# (3,6) matrix of time step sizes\
\
\

\b LinearRKDG1hConvCr5.npy
\b0 \
Using SLDG (SLRKDG1): 
\b temporalAccuracy4.py
\b0 \
------------------------------------------------------------\
h-convergence using M = Ne = 10,20,40,80,160,320; T = 4.00\
nsteps chosen such that Cr = 5 or nsteps=1;\
L2-Errors computed for each Ne;\
Repeat procedure for q = 1, 2, 3\
\
Load results using the following numpy routine:\
with open(\'92LinearRKDG1hConvCr5.npy\'92, \'91rb\'92) as f:\
	errs = np.load(f)  # (3,6) matrix of L2-errors\
	Ne = np.load(f)	# vector of number of elements\
	dt = np.load(f)	# (3,6) matrix of time step sizes used\
\
\

\b LinearRKDG1hConvCr10.npy
\b0 \
Using SLDG (SLRKDG1): 
\b temporalAccuracy4.py
\b0 \
------------------------------------------------------------\
h-convergence using M = Ne = 10,20,40,80,160,320,640; T = 4.00\
nsteps chosen such that Cr = 10 or nsteps=1;\
L2-Errors computed for each Ne;\
Repeat procedure for q = 1, 2, 3\
\
Load results using the following numpy routine:\
with open(\'92LinearRKDG1hConvCr10.npy\'92, \'91rb\'92) as f:\
	errs = np.load(f)  # (3,6) matrix of L2-errors\
	Ne = np.load(f)	# vector of number of elements\
	dt = np.load(f)	# (3,6) matrix of time step sizes used\
\
\
\
}